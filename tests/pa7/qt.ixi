// WARNING: Portions of this file are autogenerated from qt.idl and /home/kenneth/cornell/cs4120/release/libQtXi//qt.ixi.in.
// Any changes you make here may be lost!

// ********************************************************************
// This is an OO Xi interface to the Qt graphical user interface library.
// For more information about the classes and methods in this interface,
// consult the online documentation at:
// 
//     http://doc.trolltech.com/4.5/index.html.
// ********************************************************************

//  A GUI application needs a single instance of the class QApplication.
//  It manages the control flow of the application and its main settings.
//  A QApplication allows the user interface to be set up and to be started
//  running. An application looks roughly like this:
// 
// main(origArgs: int[][]) = {
//     (qapp: QApplication, args: int[][]) = qapplication origArgs;
//     // set up initial GUI here, and show it
//     qapp.exec();
// }
// 
// Unlike other classes, QApplication may NOT be subclassed from Xi.
class QApplication {
    exec()

    // Interrupt execution of the application, by halting a
    //       call to exec().
    quit()

    // Close all application windows.
    closeAllWindows()

    // Stylesheets can be used to tweak UI appearance.
    //       See: http://doc.trolltech.com/4.5/stylesheet.html
    styleSheet(): QString
    setStyleSheet(sheet: QString)
    windowIcon(): QIcon
    setWindowIcon(param0: QIcon)
    font(): QFont
    setFont(param0: QFont)

    // Add a listener to be notified when the application is about to exit.
    addAboutToQuitListener(l: AboutToQuitListener)
}

// Create a QApplication.
qapplication(origArgs: int[][]): QApplication, int[][]

// A Listener called by applications that are quitting. 
class AboutToQuitListener {
    aboutToQuit()
}


// A QString is a mutable string. Xi code can use qs "foo"
// to construct instances from Xi string literals, which are
// represented as int64_t[] arrays that are in UCS-4.
// well, the bottom 32 bits are UCS-4. the top 32 are meaningless.

// Methods suffixed with CI are case-insensitive variants.
class QString {
    XiString(): int[]
    append(other: QString)
    at(pos: int): int
    chop(n: int)
    clear()
    compare(other: QString): int
    contains(other: QString): bool
    containsCI(other: QString): bool
    count(other: QString): int
    countCI(other: QString): int
    endsWith(other: QString): bool
    indexOf(other: QString, from: int): int
    indexOfCI(other: QString, from: int): int
    insert(pos: int, str: QString)
    isEmpty(): bool
    left(n: int): QString
    getLength(): int
    mid(pos: int, n: int): QString
    prepend(other: QString)
    remove(position: int, n: int)
    repeated(n: int): QString
    replace(before: QString, after: QString)
    replaceCI(before: QString, after: QString)
    right(n: int): QString
    setNum(num: int)
    simplified(): QString
    split(separator: QString): QString[]
    startsWith(other: QString): bool
    toLower(): QString
    toUpper(): QString
    trimmed(): QString
    truncate(n: int)
    plus(other: QString): QString
    equals(other: QString): bool
    neq(other: QString): bool
    less(other: QString): bool
    leq(other: QString): bool
    greater(other: QString): bool
    geq(other: QString): bool
}


// Convert an Xi string to a QString 
qs(istr: int[]): QString


// A QString containing the decimal representation of num. 
qsNum(num: int): QString


// QPoint is a two-dimensional point (x,y). 
class QPoint {
    x(): int
    y(): int
    setX(param0: int)
    setY(param0: int)
    plus(other: QPoint): QPoint
    minus(other: QPoint): QPoint
    equals(other: QPoint): bool
    neq(other: QPoint): bool
}


// qpoint(x,y) is the QPoint for (x,y).
qpoint(x: int, y: int): QPoint

class QSize {
    boundedTo(other: QSize): QSize
    expandedTo(other: QSize): QSize
    isEmpty(): bool
    isNull(): bool
    isValid(): bool
    setHeight(param0: int)
    setWidth(param0: int)
    transpose()
    width(): int
    height(): int
    plus(other: QSize): QSize
    minus(other: QSize): QSize
    equals(other: QSize): bool
    neq(other: QSize): bool
}

qsize(w: int, h: int): QSize

class QRect {
    adjust(dx1: int, dy1: int, dx2: int, dy2: int)
    adjusted(dx1: int, dy1: int, dx2: int, dy2: int): QRect
    bottom(): int
    bottomLeft(): QPoint
    bottomRight(): QPoint
    center(): QPoint
    contains(param0: QPoint): bool
    height(): int
    intersected(other: QRect): QRect
    intersects(other: QRect): bool
    isEmpty(): bool
    left(): int
    moveBottom(y: int)
    moveBottomLeft(p: QPoint)
    moveBottomRight(p: QPoint)
    moveCenter(p: QPoint)
    moveLeft(x: int)
    moveRight(x: int)
    moveTo(p: QPoint)
    moveTop(y: int)
    moveTopLeft(p: QPoint)
    moveTopRight(p: QPoint)
    normalized(): QRect
    right(): int
    setBottom(y: int)
    setBottomLeft(p: QPoint)
    setBottomRight(p: QPoint)
    setCoords(x1: int, y1: int, x2: int, y2: int)
    setHeight(h: int)
    setLeft(x: int)
    setRect(x: int, y: int, w: int, h: int)
    setRight(x: int)
    setSize(size: QSize)
    setTop(y: int)
    setTopLeft(p: QPoint)
    setTopRight(p: QPoint)
    setWidth(w: int)
    setX(x: int)
    setY(y: int)
    size(): QSize
    top(): int
    topLeft(): QPoint
    topRight(): QPoint
    translate(dx: int, y: int)
    translated(dx: int, dy: int): QRect
    united(other: QRect): QRect
    width(): int
    x(): int
    y(): int
    equals(other: QRect): bool
    neq(other: QRect): bool
}

qrect(x: int, y: int, w: int, h: int): QRect


// Some important enums
class Orientation {
}

Horizontal(): Orientation

Vertical(): Orientation


// ***************************************************************************
//  Events.  Warning: you may only use events objects within the corresponding
//  handler method. If you try to access them later, things will crash. They
//  also can't be subclassed from Xi

// See http://doc.trolltech.com/4.5/qevent.html#Type-enum
class EventType {
}

ContextMenu(): EventType

Close(): EventType

Enter(): EventType

Hide(): EventType

KeyPress(): EventType

KeyRelease(): EventType

Leave(): EventType

MouseButtonDblClick(): EventType

MouseButtonPress(): EventType

MouseButtonRelease(): EventType

MouseMove(): EventType

Paint(): EventType

Resize(): EventType

Show(): EventType

Wheel(): EventType

class QEvent {
    type(): EventType
    accept()
    ignore()
    isAccepted(): bool
}


// We provide boolean accessors instead of bitflags in the original 
class QInputEvent extends QEvent {
    shift(): bool
    ctrl(): bool
    alt(): bool
    meta(): bool
}

class QContextMenuEvent extends QInputEvent {
    globalPos(): QPoint
    pos(): QPoint
}

class QKeyEvent extends QInputEvent {
    count(): int
    text(): QString
    isAutoRepeat(): bool

    // See http://doc.trolltech.com/4.5/qt.html#Key-enum for possible
    //       keycodes if you really need them 
    key(): int
}

class MouseButton {
}

LeftButton(): MouseButton

RightButton(): MouseButton

MidButton(): MouseButton

class QMouseEvent extends QInputEvent {
    pos(): QPoint
    globalPos(): QPoint

    // the button the causes the event 
    button(): MouseButton

    // complete state of buttons 
    left(): bool
    middle(): bool
    right(): bool
}

class QPaintEvent extends QEvent {
    rect(): QRect
}

class QResizeEvent extends QEvent {
    oldSize(): QSize
    size(): QSize
}

class QWheelEvent extends QInputEvent {
    delta(): int
    pos(): QPoint
    globalPos(): QPoint
    orientation(): Orientation
}


// ***************************************************************************
//   Graphics primitives

// A QPaintDevice is an object that can be painted.
//   You should not subclass this.
class QPaintDevice {
    toPixmap(): QPixmap
    toWidget(): QWidget
}


// An off-screen picture, which can both be drawn to,
//  and which can be drawn in turn 
class QPixmap extends QPaintDevice {
    toPixmap(): QPixmap
    load(file: QString)
    save(file: QString)
    fill(c: QColor)
    copy(rect: QRect): QPixmap
    isNull(): bool
    height(): int
    width(): int
    size(): QSize
}

qpixmap(width: int, height: int): QPixmap

qpixmapFromFile(f: QString): QPixmap


// Represent a color; components range 0-255 
class QColor {
    alpha(): int
    red(): int
    green(): int
    blue(): int
    setAlpha(param0: int)
    setRed(param0: int)
    setGreen(param0: int)
    setBlue(param0: int)
    name(): QString
    setNamedColor(param0: QString)
    equals(other: QColor): bool
    neq(other: QColor): bool
}

qcolor(r: int, g: int, b: int): QColor

qcolorRGBA(r: int, g: int, b: int, a: int): QColor

class PenStyle {
}

NoPen(): PenStyle

SolidLine(): PenStyle

DashLine(): PenStyle

DotLine(): PenStyle

DashDotLine(): PenStyle

DashDotDotLine(): PenStyle

class PenCapStyle {
}

FlatCap(): PenCapStyle

SquareCap(): PenCapStyle

RoundCap(): PenCapStyle

class PenJoinStyle {
}

MiterJoin(): PenJoinStyle

BevelJoin(): PenJoinStyle

RoundJoin(): PenJoinStyle

SvgMiterJoin(): PenJoinStyle


// Pens are used for standalone lines and outlines of shapes 
class QPen {
    brush(): QBrush
    capStyle(): PenCapStyle
    color(): QColor
    isCosmetic(): bool
    isSolid(): bool
    joinStyle(): PenJoinStyle
    setBrush(param0: QBrush)
    setCapStyle(param0: PenCapStyle)
    setColor(param0: QColor)
    setCosmetic(param0: bool)
    setJoinStyle(param0: PenJoinStyle)
    setStyle(param0: PenStyle)
    setWidth(param0: int)
    style(): PenStyle
    width(): int
    equals(other: QPen): bool
    neq(other: QPen): bool
}

qpen(c: QColor): QPen


// Brushes are used to fill interiors of shapes.
class QBrush {
    color(): QColor
    texture(): QPixmap
    setColor(c: QColor)
    setTexture(p: QPixmap)
}

qbrush(c: QColor): QBrush

qtextureBrush(p: QPixmap): QBrush

class FontStyle {
}

StyleNormal(): FontStyle

StyleItalic(): FontStyle

StyleOblique(): FontStyle

class QFont {
    bold(): bool
    setBold(param0: bool)
    italic(): bool
    setItalic(param0: bool)
    family(): QString
    setFamily(param0: QString)
    fixedPitch(): bool
    setFixedPitch(param0: bool)
    kerning(): bool
    setKerning(param0: bool)
    pixelSize(): int
    setPixelSize(param0: int)
    pointSize(): int
    setPointSize(param0: int)
    overline(): bool
    underline(): bool
    strikeOut(): bool
    setOverline(param0: bool)
    setUnderline(param0: bool)
    setStrikeOut(param0: bool)
    toString(): QString
}


// Returns application default font. See also QApplication::setFont 
qfont(): QFont

class TextElideMode {
}

ElideLeft(): TextElideMode

ElideRight(): TextElideMode

ElideMiddle(): TextElideMode

ElideNone(): TextElideMode


// This class lets one compute how much text will take with given
//   font.
//   Warning: can't be subclassed
class QFontMetrics {
    ascent(): int
    descent(): int
    height(): int
    leading(): int
    lineSpacing(): int
    xHeight(): int
    averageCharWidth(): int
    maxWidth(): int
    inFont(ch: int): bool
    leftBearing(ch: int): int
    minLeftBearing(): int
    rightBearing(ch: int): int
    minRightBearing(): int

    // line as in underline, etc.
    lineWidth(): int
    overlinePos(): int
    strikeOutPos(): int
    underlinePos(): int
    boundingRect(param0: QString): QRect
    tightBoundingRect(param0: QString): QRect
    width(param0: QString): int
    elidedText(text: QString, mode: TextElideMode, w: int): QString
}

qfontMetrics(f: QFont): QFontMetrics


// You use this to paint on a QPaintDevice. Be sure to call end() when you're
//   done. If you subclass, you'll need to call begin() to describe what to draw on
class QPainter {
    begin(param0: QPaintDevice)
    end()
    isActive(): bool

    // turns on various hints that enable fancier (but slower) anti-aliased
    //       painting
    setHighQuality(on: bool)
    save()
    restore()
    brushOrigin(): QPoint
    setBrushOrigin(param0: QPoint)
    font(): QFont
    setFont(f: QFont)

    // opacity is in percent 
    opacity(): int
    setOpacity(o: int)
    pen(): QPen
    setPen(param0: QPen)
    brush(): QBrush
    setBrush(param0: QBrush)
    drawArc(rect: QRect, starAngle: int, spanAngle: int)
    drawChord(rect: QRect, starAngle: int, spanAngle: int)
    drawEllipse(rect: QRect)
    drawPie(rect: QRect, starAngle: int, spanAngle: int)
    drawConvexPolygon(points: QPoint[])
    drawPolygon(points: QPoint[])
    drawRect(r: QRect)
    eraseRect(r: QRect)
    fillRect(r: QRect, b: QBrush)
    drawPixmap(p: QPoint, pm: QPixmap)
    drawPixmapPortion(p: QPoint, pm: QPixmap, portion: QRect)
    drawScaledPixmapPortion(d: QRect, pm: QPixmap, portion: QRect)
    drawTiledPixmap(d: QRect, p: QPixmap)
    drawTiledOffsetPixmap(d: QRect, p: QPixmap, origin: QPoint)
    drawPoint(p: QPoint)
    drawLine(p1: QPoint, p2: QPoint)
    drawText(p: QPoint, text: QString)
}

qpainter(target: QPaintDevice): QPainter


// ***************************************************************************
//   Layouts. These are used to size & position widgets automatically.
//   The concept is similar to LayoutManager's in Java, but they
//   tend to produce much nicer results.

// This is the base class for layouts. You want to use one of the subclasses
//  defined here instead (as QtXi doesn't bind most of the advanced API).
//  Should not be subclassed from Xi.
class QLayout {

    // unlike QLayout::removeWidget, this returns ownership to Xi 
    removeWidget(iw: QWidget)
}

class BoxLayoutDirection {
}

LeftToRight(): BoxLayoutDirection

RightToLeft(): BoxLayoutDirection

TopToBottom(): BoxLayoutDirection

BottomToTop(): BoxLayoutDirection


// * Defaults to top-to-bottom 
class QBoxLayout extends QLayout {
    direction(): BoxLayoutDirection
    setDirection(d: BoxLayoutDirection)

    // add a nested layout at end. A common case would be nasty
    //       a horizontal box in a vertical one 
    addLayout(child: QLayout)

    // Basically, adds stretchable/empty space to end 
    addStretch()

    // Add a widget to the end.. 
    addWidget(w: QWidget)

    // insert methods are like add, but take an index instead of
    //       assuming end 
    insertLayout(idx: int, l: QLayout)
    insertStretch(idx: int)
    insertWidget(idx: int, w: QWidget)

    // you probably don't need to tweak these as the defaults take
    //       widget charactertistics in account, and the widgets have
    //       margins by default
    addSpacing(param0: int)

    // index of last spot, for easier use of below 
    lastIdx(): int

    // override space distribution weights. 
    setStretch(idx: int, stretch: int)
}

class QHBoxLayout extends QBoxLayout {
}

qhboxLayout(): QHBoxLayout

class QVBoxLayout extends QBoxLayout {
}

qvboxLayout(): QVBoxLayout

class QGridLayout extends QLayout {
    addLayout(l: QLayout, row: int, col: int)
    addWidget(w: QWidget, row: int, col: int)
    cellRect(row: int, col: int): QRect
    columnCount(): int
    columnMinimumWidth(col: int): int
    setColumnMinimumWidth(col: int, m: int)
    columnStretch(col: int): int
    setColumnStretch(col: int, s: int)
    rowCount(): int
    rowMinimumHeight(row: int): int
    setRowMinimumHeight(row: int, m: int)
    rowStretch(row: int): int
    setRowStretch(row: int, s: int)
    horizontalSpacing(): int
    setHorizontalSpacing(s: int)
    spacing(): int
    setSpacing(s: int)
    setVerticalSpacing(s: int)
    verticalSpacing(): int
}

qgridLayout(): QGridLayout


// Shows one thing at a time 
class QStackedLayout extends QLayout {
    addWidget(w: QWidget): int
    insertWidget(idx: int, w: QWidget): int
    currentIndex(): int
    setCurrentIndex(param0: int)
    setCurrentWidget(w: QWidget)
    currentWidget(): QWidget
}

qstackedLayout(): QStackedLayout


// *
//  Widgets and a few other things
class QTimer {
    interval(): int
    isActive(): bool
    isSingleShot(): bool
    setInterval(param0: int)
    setSingleShot(param0: bool)
    start()
    stop()

    // To handle the timeout signal, you can either subclass and override
    //       timeout(), or add individual listeners.
    timeout()
    addTimerListener(tl: TimerListener)
}

qtimer(): QTimer

class TimerListener {
    timeout(timer: QTimer)
}


// actions basically abstract the idea of a menu/toolbar entry.
//   You can add them to menus and toolbars to create
//   the appropriate things.
class QAction {
    isCheckable(): bool
    setCheckable(param0: bool)
    isChecked(): bool
    setChecked(param0: bool)
    isEnabled(): bool
    setEnabled(param0: bool)
    font(): QFont
    setFont(param0: QFont)
    icon(): QIcon
    setIcon(param0: QIcon)
    text(): QString
    setText(param0: QString)
    toolTip(): QString
    setToolTip(param0: QString)
    menu(): QMenu
    setMenu(param0: QMenu)

    // Override this or add a listener to be notified when activated 
    triggered()
    addActionListener(l: ActionListener)
}

qaction(text: QString): QAction

class ActionListener {
    triggered(a: QAction)
}


// Used to set window/button icons and the like 
class QIcon {
}

qicon(fname: QString): QIcon

qiconFromPixmap(pmap: QPixmap): QIcon

qiconNull(): QIcon

qiconStandard(id: StandardIcon): QIcon

class FocusPolicy {
}

TabFocus(): FocusPolicy

ClickFocus(): FocusPolicy

StrongFocus(): FocusPolicy

WheelFocus(): FocusPolicy

NoFocus(): FocusPolicy


// A QWidget is a user interface object that has a graphical
// representation and handles input from the user. 
class QWidget extends QPaintDevice {
    toWidget(): QWidget
    show()
    hide()
    raise()
    lower()
    close()
    isEnabled(): bool
    setEnabled(param0: bool)
    setLayout(layout: QLayout)

    // Top-level window stuff 
    isWindowModified(): bool
    setWindowModified(param0: bool)
    windowTitle(): QString
    setWindowTitle(param0: QString)
    windowIcon(): QIcon
    setWindowIcon(param0: QIcon)
    isActiveWindow(): bool
    activateWindow()
    isMinimized(): bool
    isMaximized(): bool
    isFullScreen(): bool
    showMinimized()
    showMaximized()
    showFullScreen()
    showNormal()

    // Lazily update rectangle r 
    update(r: QRect)

    // Repaint rectangle r immediately 
    repaint(r: QRect)

    // These methods are mainly of use for simple demos --- normally
    //     layouts will take care of things
    setMinimumSize(param0: QSize)
    minimumSize(): QSize
    setMaximumSize(param0: QSize)
    maximumSize(): QSize
    setFixedSize(param0: QSize)
    resize(s: QSize)
    adjustSize()
    pos(): QPoint
    move(p: QPoint)
    sizeHint(): QSize
    minimumSizeHint(): QSize
    mapFrom(w: QWidget, param1: QPoint): QPoint
    mapFromGlobal(param0: QPoint): QPoint
    mapFromParent(param0: QPoint): QPoint
    mapTo(w: QWidget, param1: QPoint): QPoint
    mapToGlobal(param0: QPoint): QPoint
    mapToParent(param0: QPoint): QPoint

    // Apperance tweaks 
    setFont(f: QFont)
    font(): QFont
    styleSheet(): QString
    setStyleSheet(param0: QString)

    // Focus stuff 
    focusPolicy(): FocusPolicy
    setFocusPolicy(param0: FocusPolicy)
    setFocus()
    clearFocus()
    hasFocus(): bool

    // help stuff 
    toolTip(): QString
    setToolTip(param0: QString)
    whatsThis(): QString
    setWhatsThis(param0: QString)

    // turn this on if you want mouse move events 
    hasMouseTracking(): bool
    setMouseTracking(param0: bool)

    // adds an action to the widget; by default this
    //       adds a context menu entry; but changes contents
    //       of menus and toolbars.
    addAction(action: QAction)

    // Override this to change drawing behavior.
    //       Similarly, you can override other methods to be notified of
    //       mouse events, etc. 
    paintEvent(pe: QPaintEvent)
    mousePressEvent(e: QMouseEvent)
    mouseReleaseEvent(e: QMouseEvent)
    mouseDoubleClickEvent(e: QMouseEvent)
    mouseMoveEvent(e: QMouseEvent)
    wheelEvent(e: QWheelEvent)
    keyPressEvent(e: QKeyEvent)
    keyReleaseEvent(e: QKeyEvent)
    enterEvent(e: QEvent)
    leaveEvent(e: QEvent)
    resizeEvent(e: QResizeEvent)
    closeEvent(e: QEvent)
    contextMenuEvent(e: QContextMenuEvent)
    showEvent(e: QEvent)
    hideEvent(e: QEvent)

    // Call this to fall back to the default implementation of
    //       event handling, for any type that has a *Event method 
    defaultEvent(pe: QEvent)
}


// A QPushButton is a button that can be pushed to deliver an
// click event.
class QPushButton extends QWidget {
    icon(): QIcon
    setIcon(param0: QIcon)
    text(): QString
    setText(param0: QString)
    menu(): QMenu
    setMenu(param0: QMenu)
    showMenu()
    isDefault(): bool
    setDefault(param0: bool)
    autoDefault(): bool
    setAutoDefault(param0: bool)
    isFlat(): bool
    setFlat(param0: bool)
    defaultEvent(e: QEvent)

    // To handle the clicked signal, you can either subclass and override
    //       clicked(bool), or add individual listeners.
    addClickListener(cl: ClickListener)
    clicked()
}


// Creates a button with given label 
qpushbutton(label: QString): QPushButton


// A ClickListener listens for button click events. 
class ClickListener {
    clicked(pb: QPushButton)
}


// A checkbox with a label 
class QCheckBox extends QWidget {
    text(): QString
    setText(param0: QString)
    isChecked(): bool
    setChecked(param0: bool)
    defaultEvent(e: QEvent)
    addToggleListener(l: ToggleListener)
    toggled(param0: bool)
}


// Creates a checkbox with given label 
qcheckbox(label: QString): QCheckBox

class ToggleListener {
    toggled(widget: QWidget, state: bool)
}


// A radio button. Those with the same parent widget
//   will be grouped together, unless you use a QButtonGroup
//   to override that. 
class QRadioButton extends QWidget {
    text(): QString
    setText(param0: QString)
    isChecked(): bool
    setChecked(param0: bool)
    defaultEvent(e: QEvent)
    addToggleListener(l: ToggleListener)
    toggled(param0: bool)
}

qradio(label: QString): QRadioButton


// Use these to organize which radio buttons go together, if you
//   need multiple groups in the same widget.

//   Note: make sure to keep a reference to these to avoid it from
//   being garbage-collected!
class QButtonGroup {
    addButton(button: QRadioButton)
}

qbuttongroup(): QButtonGroup

class QMenu extends QWidget {
    addAction(a: QAction)

    // adds a submenu 
    addMenu(m: QMenu)
    addSeparator()

    // this menu represented as an action 
    menuAction(): QAction

    // This executes menu synchronously, showing it at the given
    //       position, and returns the selected action 
    exec(p: QPoint): QAction

    // title + icon for when we're added as a submenu 
    title(): QString
    setTitle(param0: QString)
    icon(): QIcon
    setIcon(param0: QIcon)
    defaultEvent(e: QEvent)
}

qmenu(title: QString): QMenu

class ToolButtonStyle {
}

ToolButtonIconOnly(): ToolButtonStyle

ToolButtonTextOnly(): ToolButtonStyle

ToolButtonTextBesideIcon(): ToolButtonStyle

ToolButtonTextUnderIcon(): ToolButtonStyle

class QToolBar extends QWidget {
    addAction(a: QAction)
    addSeparator()
    toolButtonStyle(): ToolButtonStyle
    setToolButtonStyle(param0: ToolButtonStyle)
    defaultEvent(e: QEvent)
}

qtoolbar(): QToolBar


// The menu bar of the window... Use a QMainWindow if you want one 
class QMenuBar extends QWidget {
    addMenu(m: QMenu)
    addSeparator()
    defaultEvent(e: QEvent)
}


// A piece of text (perhaps rich text!) or a pixmap 
class QLabel extends QWidget {
    defaultEvent(e: QEvent)
    margin(): int
    setMargin(param0: int)
    indent(): int
    setIndent(param0: int)

    // if you click on a label, it'll focus its buddy 
    setBuddy(buddy: QWidget)
    text(): QString

    // the text can include some basic HTML --- start it off with
    //       <qt> to force that mode
    setText(param0: QString)
    wordWrap(): bool
    setWordWrap(param0: bool)

    // note: setting this will erase previous content 
    setPixmap(p: QPixmap)
    pixmap(): QPixmap
    hasScaledContents(): bool
    setScaledContents(param0: bool)
    openExternalLinks(): bool
    setOpenExternalLinks(param0: bool)
}

qlabel(text: QString): QLabel

qlabelPixmap(p: QPixmap): QLabel


// A QMainWindow manages toolbars & the menubar.
//   Set your stuff as the central widget 
class QMainWindow extends QWidget {
    defaultEvent(e: QEvent)
    addToolBar(t: QToolBar)
    menuBar(): QMenuBar
    setCentralWidget(w: QWidget)
}

qmainwindow(): QMainWindow

class QGroupBox extends QWidget {
    defaultEvent(e: QEvent)
    title(): QString
    setTitle(t: QString)
    setFlat(param0: bool)
    isFlat(): bool
}

qgroupbox(title: QString): QGroupBox

class DialogCode {
}

Accepted(): DialogCode

Rejected(): DialogCode

class QDialog extends QWidget {
    defaultEvent(e: QEvent)

    // show modally until accept/reject called 
    exec(): int
    accept()
    reject()
}

qdialog(): QDialog


// input one line of text 
class QLineEdit extends QWidget {
    defaultEvent(e: QEvent)
    text(): QString
    setText(param0: QString)
    clear()
    isReadOnly(): bool
    setReadOnly(param0: bool)
    isModified(): bool
    setModified(param0: bool)
}

qlineedit(): QLineEdit


// input/output many lines of text, including HTML 
class QTextEdit extends QWidget {
    defaultEvent(e: QEvent)
    isReadOnly(): bool
    setReadOnly(param0: bool)
    toHtml(): QString
    toPlainText(): QString
    setHtml(param0: QString)
    setPlainText(param0: QString)
    append(param0: QString)
    clear()
}

qtextedit(): QTextEdit

class SliderListener {
    sliderMoved(slider: QWidget, val: int)
}


// base class for sliders and scrollbars 
class QAbstractSlider extends QWidget {
    defaultEvent(e: QEvent)
    orientation(): Orientation
    setOrientation(param0: Orientation)

    // method renamed since 'value' is a binding generator keyword. oops 
    getValue(): int
    setValue(param0: int)
    setRange(min: int, max: int)
    minimum(): int
    setMinimum(param0: int)
    maximum(): int
    setMaximum(param0: int)
    pageStep(): int
    setPageStep(param0: int)

    // override this or add a listener to get events... 
    sliderMoved(param0: int)
    addSliderListener(l: SliderListener)
}

class QScrollBar extends QAbstractSlider {
    defaultEvent(e: QEvent)

    // All the methods are in QAbstractSlider
}

qscrollbar(o: Orientation): QScrollBar

class SliderTickPosition {

    // above (horizontal) and left (vertical) 

    // below (horizontal) and right (vertical) 
}

TicksBothSides(): SliderTickPosition

TicksAbove(): SliderTickPosition

TicksBelow(): SliderTickPosition

class QSlider extends QAbstractSlider {
    defaultEvent(e: QEvent)

    // Most the methods are in QAbstractSlider
    tickInterval(): int
    setTickInterval(param0: int)
    setTickPosition(param0: SliderTickPosition)
    tickPosition(): SliderTickPosition
}

qslider(): QSlider

class StandardIcon {
}

TitleBarMenuButton(): StandardIcon

TitleBarMinButton(): StandardIcon

TitleBarMaxButton(): StandardIcon

TitleBarCloseButton(): StandardIcon

TitleBarNormalButton(): StandardIcon

TitleBarShadeButton(): StandardIcon

TitleBarUnshadeButton(): StandardIcon

TitleBarContextHelpButton(): StandardIcon

DockWidgetCloseButton(): StandardIcon

MessageBoxInformation(): StandardIcon

MessageBoxWarning(): StandardIcon

MessageBoxCritical(): StandardIcon

MessageBoxQuestion(): StandardIcon

DesktopIcon(): StandardIcon

TrashIcon(): StandardIcon

ComputerIcon(): StandardIcon

DriveFDIcon(): StandardIcon

DriveHDIcon(): StandardIcon

DriveCDIcon(): StandardIcon

DriveDVDIcon(): StandardIcon

DriveNetIcon(): StandardIcon

DirOpenIcon(): StandardIcon

DirClosedIcon(): StandardIcon

DirLinkIcon(): StandardIcon

FileIcon(): StandardIcon

FileLinkIcon(): StandardIcon

ToolBarHorizontalExtensionButton(): StandardIcon

ToolBarVerticalExtensionButton(): StandardIcon

FileDialogStart(): StandardIcon

FileDialogEnd(): StandardIcon

FileDialogToParent(): StandardIcon

FileDialogNewFolder(): StandardIcon

FileDialogDetailedView(): StandardIcon

FileDialogInfoView(): StandardIcon

FileDialogContentsView(): StandardIcon

FileDialogListView(): StandardIcon

FileDialogBack(): StandardIcon

DirIcon(): StandardIcon

DialogOkButton(): StandardIcon

DialogCancelButton(): StandardIcon

DialogHelpButton(): StandardIcon

DialogOpenButton(): StandardIcon

DialogSaveButton(): StandardIcon

DialogCloseButton(): StandardIcon

DialogApplyButton(): StandardIcon

DialogResetButton(): StandardIcon

DialogDiscardButton(): StandardIcon

DialogYesButton(): StandardIcon

DialogNoButton(): StandardIcon

ArrowUp(): StandardIcon

ArrowDown(): StandardIcon

ArrowLeft(): StandardIcon

ArrowRight(): StandardIcon

ArrowBack(): StandardIcon

ArrowForward(): StandardIcon

DirHomeIcon(): StandardIcon

CommandLink(): StandardIcon

VistaShield(): StandardIcon

BrowserReload(): StandardIcon

BrowserStop(): StandardIcon

MediaPlay(): StandardIcon

MediaStop(): StandardIcon

MediaPause(): StandardIcon

MediaSkipForward(): StandardIcon

MediaSkipBackward(): StandardIcon

MediaSeekForward(): StandardIcon

MediaSeekBackward(): StandardIcon

MediaVolume(): StandardIcon

MediaVolumeMuted(): StandardIcon


// constants for use with qmessageBox* methods below. Add them up
//   to get the buttons you need
ButtonOk(): int

ButtonSave(): int

ButtonSaveAll(): int

ButtonOpen(): int

ButtonYes(): int

ButtonYesToAll(): int

ButtonNo(): int

ButtonNoToAll(): int

ButtonAbort(): int

ButtonRetry(): int

ButtonIgnore(): int

ButtonClose(): int

ButtonCancel(): int

ButtonDiscard(): int

ButtonHelp(): int

ButtonApply(): int

ButtonReset(): int

ButtonRestoreDefaults(): int

qmessageBoxCritical(parent: QWidget, title: QString, text: QString, buttons: int): int

qmessageBoxInformation(parent: QWidget, title: QString, text: QString, buttons: int): int

qmessageBoxWarning(parent: QWidget, title: QString, text: QString, buttons: int): int

qmessageBoxQuestion(parent: QWidget, title: QString, text: QString, buttons: int): int

NO_WIDGET(): QWidget


